@page "/"

@using Microsoft.AspNetCore.Authorization
@using TaskManager.UI.Infrastructure.Cards
@using TaskManager.UI.Infrastructure.Cards.Contracts
@using TaskManager.UI.Infrastructure.Shared
@using TaskManager.UI.Models.Cards
@using TaskManager.UI.Pages.Components

@attribute [Authorize]

@inject ICardService CardService
@inject NavigationManager Navigation

<div class="content-wrapper">
    <button class="btn btn-primary create-button" @onclick="ShowModal">
        <i>Создать</i>
        <span class="create-button-icon"></span>
    </button>
    <div class="table-wrapper">
        @if (_cards is not null)
        {
            <table class="table">

                <thead>
                <tr>
                    <th>Номер</th>
                    <th>Название</th>
                    <th>Предпологаемая дата</th>
                    <th>Статус</th>
                    <th>Дата завершения</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var card in _cards.Data)
                {
                    <tr @ondblclick="@(() => NavigateToDetails(card.Id))" style="cursor: pointer;">
                        <td>@card.Id</td>
                        <td>@card.Name</td>
                        <td>@card.EstimatedCompletionDate.ToLocalTime().ToString("g")</td>
                        <td>
                            <span class="@GetStatusClass(card.Status)">
                                @GetStatusText(card.Status)
                            </span>
                        </td>
                        <td>@(card.ClosingDate?.ToLocalTime().ToString("g") ?? "-")</td>
                    </tr>
                }
                </tbody>

            </table>
            <div class="options-wrapper">
                <div class="page-selector">
                    <button class="prev-page-button" @onclick="PreviousPage" disabled=@(_currentPage == 1)>
                        <span class="prev-page-button-icon"></span>
                    </button>
                    <span class="current-page-number">@_currentPage</span>
                    <button class="next-page-button" @onclick="NextPage" disabled="@(_currentPage == _cards.TotalPages)">
                        <span class="next-page-button-icon"></span>
                    </button>
                </div>
                <select value="@_pageSize" @onchange="OnPageSizeChanged" class="page-size-selector">
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>

<Modal @ref="_modalRef" Title="Создать задачу">
    <EditForm Model="CreateCardRequest" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="modal-body">
            <InputText @bind-Value="CreateCardRequest.Name" class="default-input" placeholder="Название"/>
            <InputTextArea @bind-Value="CreateCardRequest.Description" class="default-input" placeholder="Описание"/>
            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="CreateCardRequest.EstimatedCompletionDate" class="default-input"/>
        </div>
        <div class="modal-footer">
            <button class="btn btn-outline-danger" @onclick="Close">Закрыть</button>
            <button class="btn btn-outline-primary" type="submit"><span style="margin: auto">Создать</span></button>
        </div>
    </EditForm>
</Modal>

@code {
    private PagedList<GetCardResponse>? _cards;
    
    private int _currentPage = 1;
    private int _pageSize = 10;

    [SupplyParameterFromForm]
    private CreateCardRequest CreateCardRequest { get; set; } = new() { EstimatedCompletionDate = DateTime.UtcNow };
    private Modal? _modalRef;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCardsDataAsync();
    }
    
    private async Task LoadCardsDataAsync()
    {
        _cards = await CardService.GetAsync(_currentPage, _pageSize);
    }
    
    private void ShowModal()
    {
        _modalRef?.Show();
    }

    private void NavigateToDetails(int cardId)
    {
        Navigation.NavigateTo($"/card/{cardId}");
    }
    
    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        _cards = null;
        _currentPage = 1;
        _pageSize = Convert.ToInt32(e.Value);
    
        await LoadCardsDataAsync();
    }
    
    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadCardsDataAsync();
        }
    }

    private async Task NextPage()
    {
        if (_currentPage < _cards?.TotalPages)
        {
            _currentPage++;
            await LoadCardsDataAsync();
        }
    }

    private async void HandleValidSubmit()
    {
        await CardService.CreateAsync(CreateCardRequest);
        
        await LoadCardsDataAsync();
    }
    
    private void Close()
    {
        _modalRef?.Close();
    }
    
    private string GetStatusText(int status) => status switch
    {
        0 => "Создана",
        1 => "В процессе",
        2 => "Завершена",
        _ => "Неизвестно"
    };

    private string GetStatusClass(int status) => status switch
    {
        0 => "status-created",     // серый
        1 => "status-in-progress", // синий
        2 => "status-done",        // зелёный
        _ => "status-unknown"
    };
}